#include <stdio.h>
#include<fstream>
#include<iostream>
#include <allegro5/allegro.h>
#include "allegro5/allegro_image.h"
#include "allegro5/allegro_primitives.h"
#include "allegro5/allegro_native_dialog.h"
using namespace std;
const float FPS = 8;
const int board_width = 20;
const int board_height = 20;
int board[board_width][board_height];
int x, y, m = 0;
int *up = &board[y-1][x];
int *down = &board[y+1][x];
int *lefty = &board[y][x-1];
int *righty = &board[y][x+1];
int q = 0,menu_select=1;
enum MYKEYS {
	KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT
};

void load_level(int v)
{
	ifstream in("save.txt");
	for (int s = 1; s <= v; s++) 
	{
		for (int i = 0; i < board_height; i++)
		{
			for (int j = 0; j < board_width; j++)
			{
				in >> board[i][j];
				if (board[i][j]==5) {
					x = j;
					y = i;
				}
			}

		}
	}
}
void show(int p, int xp, int yp)
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_BITMAP  *image = NULL;
	
			if (p == 0)
				image = al_load_bitmap("empty.png");
			if (p == 1)
				image = al_load_bitmap("wall.png");
			if (p == 2)
				image = al_load_bitmap("box.png");
			if (p == 3)
				image = al_load_bitmap("done.png");
			if (p == 4)
				image = al_load_bitmap("target.png");
			if (p == 5)
				image = al_load_bitmap("player.png");
			if (!image) {
				al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
					NULL, ALLEGRO_MESSAGEBOX_ERROR);
				al_destroy_display(display);
				return;
			}
			al_draw_bitmap(image, xp * 50, yp * 50, 0);
	

}
void draw()
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_BITMAP  *image = NULL;
	for (int i = 0; i < board_height; i++)
	{
		for (int j = 0; j < board_width; j++)
		{
			if(board[i][j] ==0)
				image = al_load_bitmap("empty.png");
			if (board[i][j] == 1)
				image = al_load_bitmap("wall.png");
			if (board[i][j] == 2)
				image = al_load_bitmap("box.png");
			if (board[i][j] == 3)
				image = al_load_bitmap("done.png");
			if (board[i][j] == 4)
				image = al_load_bitmap("target.png");
			if (board[i][j] == 5)
				image = al_load_bitmap("player.png");
			if (!image) {
				al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
					NULL, ALLEGRO_MESSAGEBOX_ERROR);
				al_destroy_display(display);
				return;
			}
			al_draw_bitmap(image, j*50, i*50, 0);
		}		
	}
	al_flip_display();
}

		/*if (t == 0)
			image = al_load_bitmap("box2.png");
		if (t == 1)
			image = al_load_bitmap("target.png");
		if (t == 2)
			image = al_load_bitmap("empty.png");

		al_draw_bitmap(image, 475, 475, 0);
		al_flip_display();
		*/
		//if (redraw && al_is_event_queue_empty(event_queue)) {
	//		redraw = false;
	//		al_flip_display();
		//}
	

void menu() {

		ALLEGRO_DISPLAY *display = NULL;
		ALLEGRO_BITMAP  *image = NULL;
		ALLEGRO_EVENT_QUEUE *event_queue = NULL;
		ALLEGRO_TIMER *timer = NULL;
		bool key[4] = { false, false,false,false};
		bool redraw = true;
		bool doexit = false, close = false, exit = false;
		for (int i = 0; i < board_height; i++)
		{
			for (int j = 0; j < board_width; j++)
			{

					image = al_load_bitmap("wall.png");
				if (!image) {
					al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
						NULL, ALLEGRO_MESSAGEBOX_ERROR);
					al_destroy_display(display);
					return;
				}
				al_draw_bitmap(image, j * 50, i * 50, 0);
			}
		}
		al_flip_display();


		//al_clear_to_color(al_map_rgb(0, 0, 0));

		//al_flip_display();
		int t = 0;

		while (!close)
		{

			ALLEGRO_EVENT eve;
			al_wait_for_event(event_queue, &eve);



			if (eve.type == ALLEGRO_EVENT_TIMER) {
				if (key[KEY_UP]) {
					t--;
					if (t < 0)
						t = 0;
					if (t == 0) {
						image = al_load_bitmap("box2.png");

						al_draw_bitmap(image, 475, 475, 0);
					}
				}

				if (key[KEY_DOWN]) {
					t++;
					if (t > 2)
						t = 2;

					if (t == 0) {
						image = al_load_bitmap("box2.png");

						al_draw_bitmap(image, 475, 475, 0);
					}
				}


				else if (eve.type == ALLEGRO_EVENT_KEY_DOWN) {
					switch (eve.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = true;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = true;
						break;

					}
				}
				else if (eve.type == ALLEGRO_EVENT_KEY_UP) {
					switch (eve.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = false;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = false;
						break;

					case ALLEGRO_KEY_ESCAPE:
						doexit = true;
						break;
					}
				}

				else if (eve.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
					close = true;
					break;
				}



				if (redraw && al_is_event_queue_empty(event_queue)) {
					redraw = false;
					

					al_flip_display();
				}
			}
		}
		
	}

























void move(int d)
{
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_BITMAP  *image = NULL;
	int mx=0, my=0;
	if (d == 1)
		my = -1;
	if (d == 2)
		my = 1;
	if (d == 3)
		mx = -1;
	if (d == 4)
		mx = 1;

	if (board[y + my][x + mx] == 0)
	{
		
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, (x+mx) * 50, (y +my) * 50, 0);
		if (board[y][x] != 4)
			board[y][x] = 0;
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4) {
			image = al_load_bitmap("target.png");
			board[y][x] = 4;
		}
		al_draw_bitmap(image, x * 50, y * 50, 0);

		board[y+my][x+mx] = 5;

		y = y + my;
		x = x + mx;
		al_flip_display();

	}

	/*if ((d == 1) && (board[y - 1][x] == 0))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, x * 50, (y - 1) * 50, 0);
		if(board[y][x]!=4)
		board[y][x] = 0;
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4) {
			image = al_load_bitmap("target.png");
			board[y][x] = 4;
		}
		al_draw_bitmap(image, x * 50, y * 50, 0);

		board[y - 1][x] = 5;
		
		y = y - 1;
		al_flip_display();
	}
	else if ((d == 2) && (board[y + 1][x] ==0))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, x * 50, (y + 1) * 50, 0);
		if (board[y][x] != 4)
		board[y][x] = 0;
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4) {
			image = al_load_bitmap("target.png");
			board[y][x] = 4;
		}
		al_draw_bitmap(image, x * 50, y * 50, 0);
		board[y + 1][x] = 5;
		
		y = y + 1;
		al_flip_display();
	}
	else if ((d == 3) && (board[y][x-1] == 0))
	{

			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, (x - 1) * 50, y * 50, 0);
			if (board[y][x] != 4)
			board[y][x] = 0;
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4) {
				image = al_load_bitmap("target.png");
				board[y][x] = 4;
			}
			al_draw_bitmap(image, x * 50, y * 50, 0);

			board[y][x - 1] = 5;
			
			x = x - 1;
			
	
		al_flip_display();
	}
	else if ((d == 4) && (board[y][x+1] ==0))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, (x + 1) * 50, y * 50, 0);
		if (board[y][x] != 4)
		board[y][x] = 0;
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4) {
			image = al_load_bitmap("target.png");
			board[y][x] = 4;
		}
		al_draw_bitmap(image, x * 50, y * 50, 0);
		board[y][x + 1] = 5;
	
		x = x + 1;
		al_flip_display();
	}*/
	
	/////////////////////////
	else if ((d == 1) && ((board[y - 1][x] == 2)||(board[y-1][x]==3)))
	{	
		if (board[y - 2][x] == 0) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, x * 50, (y - 1) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("box2.png");
			al_draw_bitmap(image, x * 50, (y - 2) * 50, 0);
			board[y - 2][x] = 2;
			if (board[y-1][x]==3)
				board[y - 1][x] = 4;
			else
				board[y - 1][x] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			y = y - 1;
			al_flip_display();
		}
		else if (board[y - 2][x] == 4) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, x * 50, (y - 1) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("done.png");
			al_draw_bitmap(image, x * 50, (y - 2) * 50, 0);
			board[y - 2][x] = 3;
			if (board[y - 1][x] == 3)
				board[y - 1][x] = 4;
			else
			board[y - 1][x] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			y = y - 1;
			al_flip_display();
		}
		
	}
	else if ((d == 2) && ((board[y + 1][x] == 2)||(board[y+1][x]==3) ))
	{
		


		if (board[y + 2][x] == 0) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, x * 50, (y + 1) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("box2.png");
			al_draw_bitmap(image, x * 50, (y + 2) * 50, 0);
			board[y + 2][x] = 2;
			if (board[y + 1][x] == 3)
				board[y + 1][x] = 4;
			else
			board[y + 1][x] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			y = y + 1;
			al_flip_display();
		}
		else if (board[y + 2][x] == 4) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, x * 50, (y + 1) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("done.png");
			al_draw_bitmap(image, x * 50, (y + 2) * 50, 0);
			board[y + 2][x] = 3;
			if (board[y + 1][x] == 3)
				board[y + 1][x] = 4;
			else
			board[y + 1][x] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			y = y + 1;
			al_flip_display();
		}

	}
	else if ((d == 3) && ((board[y][x - 1] == 2)||(board[y][x-1]==3)))
	{
		
		
		if (board[y][x-2] == 0) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, (x-1) * 50, y * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("box2.png");
			al_draw_bitmap(image, (x-2) * 50, y * 50, 0);
			board[y][x-2] = 2;
			if (board[y][x - 1] == 3)
				board[y][x - 1] = 4;
			else
			board[y ][x-1] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			x = x - 1;
			al_flip_display();
		}
		else if (board[y][x-2] == 4) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, (x-1) * 50, (y) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("done.png");
			al_draw_bitmap(image, (x-2) * 50, y * 50, 0);
			board[y][x-2] = 3;
			if (board[y][x - 1] == 3)
				board[y][x - 1] = 4;
			else
			board[y][x-1] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			x = x - 1;
			al_flip_display();
		}

	}
	else if ((d == 4) && ((board[y][x + 1] == 2)||(board[y][x+1]==3)))
	{
		if (board[y][x + 2] == 0) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, (x + 1) * 50, y * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("box2.png");
			al_draw_bitmap(image, (x + 2) * 50, y * 50, 0);
			board[y][x + 2] = 2;
			if (board[y][x + 1] == 3)
				board[y][x + 1] = 4;
			else
			board[y][x + 1] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			x = x + 1;
			al_flip_display();
		}
		else if (board[y][x + 2] == 4) {
			image = al_load_bitmap("player.png");
			al_draw_bitmap(image, (x + 1) * 50, (y) * 50, 0);
			image = al_load_bitmap("empty.png");
			if (board[y][x] == 4)
				image = al_load_bitmap("target.png");
			al_draw_bitmap(image, x * 50, y * 50, 0);
			image = al_load_bitmap("done.png");
			al_draw_bitmap(image, (x + 2) * 50, y * 50, 0);
			board[y][x +2] = 3;
			if (board[y][x + 1] == 3)
				board[y][x + 1] = 4;
			else
			board[y][x +1] = 5;
			if (board[y][x] != 4)
			board[y][x] = 0;
			x = x + 1;
			al_flip_display();
		}
	}
	else if ((d == 1) && (board[y - 1][x] == 4))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, x * 50, (y - 1) * 50, 0);
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4)
			image = al_load_bitmap("target.png");
		al_draw_bitmap(image, x * 50, y * 50, 0);
		if (board[y][x] != 4)
		board[y][x] = 0;
		y = y - 1;
		al_flip_display();
	}
	else if ((d == 2) && (board[y + 1][x] == 4))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, x * 50, (y + 1) * 50, 0);
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4)
			image = al_load_bitmap("target.png");
		al_draw_bitmap(image, x * 50, y * 50, 0);
		if (board[y][x] != 4)
		board[y][x] = 0;
		y = y + 1;
		al_flip_display();
	}
	else if ((d == 3) && (board[y][x - 1] == 4))
	{

		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, (x - 1) * 50, y * 50, 0);
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4)
			image = al_load_bitmap("target.png");
		al_draw_bitmap(image, x * 50, y * 50, 0);

		board[y][x] = 0;
		x = x - 1;


		al_flip_display();
	}
	else if ((d == 4) && (board[y][x + 1] == 4))
	{
		image = al_load_bitmap("player.png");
		al_draw_bitmap(image, (x + 1) * 50, y * 50, 0);
		image = al_load_bitmap("empty.png");
		if (board[y][x] == 4)
			image = al_load_bitmap("target.png");
		al_draw_bitmap(image, x * 50, y * 50, 0);
		if (board[y][x] != 4)
		board[y][x] = 0;
		x = x + 1;
		al_flip_display();
	}
	/*if (board[y][x] == 4)
	{
		image = al_load_bitmap("target.png");
		al_draw_bitmap(image, (x) * 50, (y) * 50, 0);
		al_flip_display();
	}*/

}

int main(int argc, char **argv) {



	ALLEGRO_BITMAP  *image = NULL;
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_DISPLAY_MODE   disp_data;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	bool key[4] = { false, false, false, false };
	bool redraw = true;
	bool doexit = false, close = false,exit=false;

	if (!al_init()) {
		fprintf(stderr, "failed to initialize allegro!\n");
		return -1;
	}

	if (!al_install_keyboard()) {
		fprintf(stderr, "failed to initialize the keyboard!\n");
		return -1;
	}
	timer = al_create_timer(1.0 / FPS);
	if (!timer) {
		fprintf(stderr, "failed to create timer!\n");
		return -1;
	}

	display = al_create_display(1000, 1000);
	if (!display) {
		fprintf(stderr, "failed to create display!\n");
		al_destroy_timer(timer);
		return -1;
	}

	event_queue = al_create_event_queue();
	if (!event_queue) {
		fprintf(stderr, "failed to create event_queue!\n");
		al_destroy_display(display);
		al_destroy_timer(timer);
		return -1;
	}
	if (!al_init_image_addon()) {
		al_show_native_message_box(display, "Error", "Error", "Failed to initialize al_init_image_addon!",
			NULL, ALLEGRO_MESSAGEBOX_ERROR);
		return 0;
	}



	//al_rest(3.0);

	//load_level(2);





	al_register_event_source(event_queue, al_get_display_event_source(display));

	al_register_event_source(event_queue, al_get_timer_event_source(timer));

	al_register_event_source(event_queue, al_get_keyboard_event_source());

	//al_clear_to_color(al_map_rgb(0, 0, 0));

	//al_flip_display();

	al_start_timer(timer);
	//al_clear_to_color(al_map_rgb(175, 175, 140));
	//draw();
	//menu();
	int start = 0;
	load_level(4);
	draw();
	
	
	while (1) {

		ALLEGRO_EVENT ev;
		//al_wait_for_event(event_queue, &ev);




		for (int i = 0; i < board_height; i++)
		{
			for (int j = 0; j < board_width; j++)
			{

				image = al_load_bitmap("wall.png");
				if (!image) {
					al_show_native_message_box(display, "Error", "Error", "Failed to load image!",
						NULL, ALLEGRO_MESSAGEBOX_ERROR);
					al_destroy_display(display);
					return;
				}
				al_draw_bitmap(image, j * 50, i * 50, 0);
			}
		}
		al_flip_display();


		//al_clear_to_color(al_map_rgb(0, 0, 0));

		//al_flip_display();
		int t = 0;

		
		menu_select = 1;

		if (menu_select == 2)
		{
			image = al_load_bitmap("loading.png");
			al_draw_bitmap(image, 475, 475, 0);
			al_flip_display();
			while (!start) {
				//al_wait_for_event(event_queue, &ev);
					//if (ev.type == ALLEGRO_EVENT_KEY_UP) {
						//switch (ev.keyboard.keycode) {
						//case ALLEGRO_KEY_ESCAPE:
				start = 1;
				break;
				//////		}
				//}

			}
		}
		if (menu_select == 3)
		{
			close = true;
		}
		if (menu_select == 1)
		{


			while (!doexit)
			{

				al_wait_for_event(event_queue, &ev);


				if (ev.type == ALLEGRO_EVENT_TIMER) {
					if (key[KEY_UP]) {
						move(1);
						m = 1;

					}

					if (key[KEY_DOWN]) {
						move(2);
						m = 2;

					}
					if (key[KEY_LEFT]) {
						move(3);
						m = 3;

					}

					if (key[KEY_RIGHT]) {
						move(4);
						m = 4;

					}


				}


				else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
					switch (ev.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = true;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = true;
						break;

					case ALLEGRO_KEY_LEFT:
						key[KEY_LEFT] = true;
						break;

					case ALLEGRO_KEY_RIGHT:
						key[KEY_RIGHT] = true;
						break;
					}
				}
				else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
					switch (ev.keyboard.keycode) {
					case ALLEGRO_KEY_UP:
						key[KEY_UP] = false;
						break;

					case ALLEGRO_KEY_DOWN:
						key[KEY_DOWN] = false;
						break;

					case ALLEGRO_KEY_LEFT:
						key[KEY_LEFT] = false;
						break;

					case ALLEGRO_KEY_RIGHT:
						key[KEY_RIGHT] = false;
						break;

					case ALLEGRO_KEY_ESCAPE:
						doexit = true;
						break;

					case ALLEGRO_KEY_R:
						image = al_load_bitmap("loading.png");
						al_draw_bitmap(image, 250, 250, 0);
						al_flip_display();
						load_level(4);
						draw();
						break;
					}
				}




































				/////////////////////////////////////



				else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
					close = true;
					break;
				}



				if (redraw && al_is_event_queue_empty(event_queue)) {
					redraw = false;
					al_flip_display();
				}
			}
		}
	}
	//	if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
	//		break;
	//	}
	//}
	
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);
	al_destroy_bitmap(image);
	return 0;
}
